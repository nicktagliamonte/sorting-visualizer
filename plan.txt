Phase 1: core structure
goal: create the foundation with dropdown, play/pause/step buttons, and one working sort
    add a select dropdown to choose an algorithm
        note that on select, random data will populate. i want as large a quantity is reasonable per algorithm
    add buttons: play/pause, replay, and step forward
    add a user-defined input field for timeout time. so that the crazy inefficient ones will stop at a certain point. number of seconds, sanitize/restrict input to n in N
    store current array and a generator/iterator for the selected algorithm
    on play, advance steps in a timed loop
    on step, advance on step of the generator
    on dropdown change, reset and generate a new random array

Phase 2: algorithm integration
goal: add sorting algorithms as generator functions that yield after each step
    âœ… Start With:
    Bubble Sort
    Selection Sort
    Insertion Sort

    ðŸ§  Add Educational:
    Cocktail Shaker Sort
    Comb Sort
    Gnome Sort
    Odd-Even Sort
    Bitonic Sort
    TimSort (tricky but optional last)

    ðŸ˜‚ Add Joke Sorts (as async or mock animations):
    Bogo Sort (limit steps)
    Bozo Sort
    Stooge Sort
    Sleep Sort (use setTimeout)
    Pancake Sort
    Spaghetti Sort (fake with animation delay)

    ðŸš€ Add Advanced:
    Merge Sort
    Quick Sort
    Heap Sort
    Shell Sort
    Radix Sort
    Counting Sort
    Bucket Sort
    Bitonic Merge Sort
    Patience Sort
    Flash Sort

Phase 3: state machine and timing
goal: make sure animation state is well controlled
    verify the below logic
        a single sortIterator is used
        play button starts setInterval or requestAnimationFrame loop
        pause clears it
        step just calls iterator.next() once
        use drawBars(state) to update dom

Phase 4: styling and polish
goal: self explainatory
    highlicht currently compared/swapped bars
    add colors for active, sorted, etc
    make responsive layout